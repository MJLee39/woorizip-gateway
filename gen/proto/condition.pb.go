// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: proto/condition.proto

package proto

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId    string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Location     string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	BuildingType string `protobuf:"bytes,4,opt,name=buildingType,proto3" json:"buildingType,omitempty"`
	Fee          int32  `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`
	MoveInDate   string `protobuf:"bytes,6,opt,name=moveInDate,proto3" json:"moveInDate,omitempty"`
	Hashtag      string `protobuf:"bytes,7,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_condition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{0}
}

func (x *Condition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Condition) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Condition) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Condition) GetBuildingType() string {
	if x != nil {
		return x.BuildingType
	}
	return ""
}

func (x *Condition) GetFee() int32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Condition) GetMoveInDate() string {
	if x != nil {
		return x.MoveInDate
	}
	return ""
}

func (x *Condition) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

// req: save, readByWhere
type ConditionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Location     string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	BuildingType string `protobuf:"bytes,3,opt,name=buildingType,proto3" json:"buildingType,omitempty"`
	Fee          int32  `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
	MoveInDate   string `protobuf:"bytes,5,opt,name=moveInDate,proto3" json:"moveInDate,omitempty"`
	Hashtag      string `protobuf:"bytes,6,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
}

func (x *ConditionReq) Reset() {
	*x = ConditionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_condition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionReq) ProtoMessage() {}

func (x *ConditionReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionReq.ProtoReflect.Descriptor instead.
func (*ConditionReq) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{1}
}

func (x *ConditionReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConditionReq) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ConditionReq) GetBuildingType() string {
	if x != nil {
		return x.BuildingType
	}
	return ""
}

func (x *ConditionReq) GetFee() int32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *ConditionReq) GetMoveInDate() string {
	if x != nil {
		return x.MoveInDate
	}
	return ""
}

func (x *ConditionReq) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

// req: readByWhere
type ConditionReadByWhereReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location     string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	BuildingType string `protobuf:"bytes,2,opt,name=buildingType,proto3" json:"buildingType,omitempty"`
	Fee          int32  `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	MoveInDate   string `protobuf:"bytes,4,opt,name=moveInDate,proto3" json:"moveInDate,omitempty"`
	Hashtag      string `protobuf:"bytes,5,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
}

func (x *ConditionReadByWhereReq) Reset() {
	*x = ConditionReadByWhereReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_condition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionReadByWhereReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionReadByWhereReq) ProtoMessage() {}

func (x *ConditionReadByWhereReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionReadByWhereReq.ProtoReflect.Descriptor instead.
func (*ConditionReadByWhereReq) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{2}
}

func (x *ConditionReadByWhereReq) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ConditionReadByWhereReq) GetBuildingType() string {
	if x != nil {
		return x.BuildingType
	}
	return ""
}

func (x *ConditionReadByWhereReq) GetFee() int32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *ConditionReadByWhereReq) GetMoveInDate() string {
	if x != nil {
		return x.MoveInDate
	}
	return ""
}

func (x *ConditionReadByWhereReq) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

// req: update
type ConditionReqWithId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId    string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Location     string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	BuildingType string `protobuf:"bytes,4,opt,name=buildingType,proto3" json:"buildingType,omitempty"`
	Fee          int32  `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`
	MoveInDate   string `protobuf:"bytes,6,opt,name=moveInDate,proto3" json:"moveInDate,omitempty"`
	Hashtag      string `protobuf:"bytes,7,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
}

func (x *ConditionReqWithId) Reset() {
	*x = ConditionReqWithId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_condition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionReqWithId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionReqWithId) ProtoMessage() {}

func (x *ConditionReqWithId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionReqWithId.ProtoReflect.Descriptor instead.
func (*ConditionReqWithId) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{3}
}

func (x *ConditionReqWithId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConditionReqWithId) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConditionReqWithId) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ConditionReqWithId) GetBuildingType() string {
	if x != nil {
		return x.BuildingType
	}
	return ""
}

func (x *ConditionReqWithId) GetFee() int32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *ConditionReqWithId) GetMoveInDate() string {
	if x != nil {
		return x.MoveInDate
	}
	return ""
}

func (x *ConditionReqWithId) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

// req: readMy, delete
type ConditionIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ConditionIdReq) Reset() {
	*x = ConditionIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_condition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionIdReq) ProtoMessage() {}

func (x *ConditionIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionIdReq.ProtoReflect.Descriptor instead.
func (*ConditionIdReq) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{4}
}

func (x *ConditionIdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// req: IsRegistered
type ConditionAccountIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
}

func (x *ConditionAccountIdReq) Reset() {
	*x = ConditionAccountIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_condition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionAccountIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionAccountIdReq) ProtoMessage() {}

func (x *ConditionAccountIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionAccountIdReq.ProtoReflect.Descriptor instead.
func (*ConditionAccountIdReq) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{5}
}

func (x *ConditionAccountIdReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// resp: IsRegistered
type ConditionIsRegisteredResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRegistered bool `protobuf:"varint,1,opt,name=isRegistered,proto3" json:"isRegistered,omitempty"`
}

func (x *ConditionIsRegisteredResp) Reset() {
	*x = ConditionIsRegisteredResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_condition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionIsRegisteredResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionIsRegisteredResp) ProtoMessage() {}

func (x *ConditionIsRegisteredResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionIsRegisteredResp.ProtoReflect.Descriptor instead.
func (*ConditionIsRegisteredResp) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{6}
}

func (x *ConditionIsRegisteredResp) GetIsRegistered() bool {
	if x != nil {
		return x.IsRegistered
	}
	return false
}

// resp: save, readMyCondition, update
type ConditionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId    string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Location     string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	BuildingType string `protobuf:"bytes,4,opt,name=buildingType,proto3" json:"buildingType,omitempty"`
	Fee          int32  `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`
	MoveInDate   string `protobuf:"bytes,6,opt,name=moveInDate,proto3" json:"moveInDate,omitempty"`
	Hashtag      string `protobuf:"bytes,7,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
}

func (x *ConditionResp) Reset() {
	*x = ConditionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_condition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionResp) ProtoMessage() {}

func (x *ConditionResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionResp.ProtoReflect.Descriptor instead.
func (*ConditionResp) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{7}
}

func (x *ConditionResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConditionResp) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConditionResp) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ConditionResp) GetBuildingType() string {
	if x != nil {
		return x.BuildingType
	}
	return ""
}

func (x *ConditionResp) GetFee() int32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *ConditionResp) GetMoveInDate() string {
	if x != nil {
		return x.MoveInDate
	}
	return ""
}

func (x *ConditionResp) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

// resp: readAll, readByWhere
type ConditionRespList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*Condition `protobuf:"bytes,1,rep,name=Conditions,proto3" json:"Conditions,omitempty"`
}

func (x *ConditionRespList) Reset() {
	*x = ConditionRespList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_condition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionRespList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionRespList) ProtoMessage() {}

func (x *ConditionRespList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionRespList.ProtoReflect.Descriptor instead.
func (*ConditionRespList) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{8}
}

func (x *ConditionRespList) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// resp: delete
type ConditionDeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ConditionDeleteResp) Reset() {
	*x = ConditionDeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_condition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionDeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionDeleteResp) ProtoMessage() {}

func (x *ConditionDeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_condition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionDeleteResp.ProtoReflect.Descriptor instead.
func (*ConditionDeleteResp) Descriptor() ([]byte, []int) {
	return file_proto_condition_proto_rawDescGZIP(), []int{9}
}

func (x *ConditionDeleteResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_proto_condition_proto protoreflect.FileDescriptor

var file_proto_condition_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x62, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc5, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65,
	0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f,
	0x76, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68,
	0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74,
	0x61, 0x67, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x42, 0x79, 0x57, 0x68, 0x65, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x22, 0xce, 0x01, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x65,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x22, 0x20, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x35, 0x0a,
	0x15, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x76,
	0x65, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74,
	0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61,
	0x67, 0x22, 0x4b, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x27,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xaa, 0x06, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x0c,
	0x49, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x22, 0x2e, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x69, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x0d,
	0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22,
	0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f,
	0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x79, 0x12,
	0x61, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x15, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x42, 0x79, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x42, 0x79, 0x57, 0x68, 0x65, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x61, 0x64,
	0x42, 0x79, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x6d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x1a, 0x1a, 0x2e, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a,
	0x01, 0x2a, 0x1a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x2a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x42, 0x8b, 0x01, 0x0a, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x42, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x1b, 0x62, 0x75, 0x66,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x77, 0x61, 0x66, 0x2f, 0x69,
	0x64, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02,
	0x0b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0xca, 0x02, 0x0b, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0xe2, 0x02, 0x17, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_condition_proto_rawDescOnce sync.Once
	file_proto_condition_proto_rawDescData = file_proto_condition_proto_rawDesc
)

func file_proto_condition_proto_rawDescGZIP() []byte {
	file_proto_condition_proto_rawDescOnce.Do(func() {
		file_proto_condition_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_condition_proto_rawDescData)
	})
	return file_proto_condition_proto_rawDescData
}

var file_proto_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_condition_proto_goTypes = []interface{}{
	(*Condition)(nil),                 // 0: conditionpb.Condition
	(*ConditionReq)(nil),              // 1: conditionpb.ConditionReq
	(*ConditionReadByWhereReq)(nil),   // 2: conditionpb.ConditionReadByWhereReq
	(*ConditionReqWithId)(nil),        // 3: conditionpb.ConditionReqWithId
	(*ConditionIdReq)(nil),            // 4: conditionpb.ConditionIdReq
	(*ConditionAccountIdReq)(nil),     // 5: conditionpb.ConditionAccountIdReq
	(*ConditionIsRegisteredResp)(nil), // 6: conditionpb.ConditionIsRegisteredResp
	(*ConditionResp)(nil),             // 7: conditionpb.ConditionResp
	(*ConditionRespList)(nil),         // 8: conditionpb.ConditionRespList
	(*ConditionDeleteResp)(nil),       // 9: conditionpb.ConditionDeleteResp
	(*emptypb.Empty)(nil),             // 10: google.protobuf.Empty
}
var file_proto_condition_proto_depIdxs = []int32{
	0,  // 0: conditionpb.ConditionRespList.Conditions:type_name -> conditionpb.Condition
	5,  // 1: conditionpb.ConditionService.IsRegistered:input_type -> conditionpb.ConditionAccountIdReq
	1,  // 2: conditionpb.ConditionService.SaveCondition:input_type -> conditionpb.ConditionReq
	5,  // 3: conditionpb.ConditionService.ReadMyCondition:input_type -> conditionpb.ConditionAccountIdReq
	10, // 4: conditionpb.ConditionService.ReadAllCondition:input_type -> google.protobuf.Empty
	2,  // 5: conditionpb.ConditionService.ReadByWhereCondition:input_type -> conditionpb.ConditionReadByWhereReq
	3,  // 6: conditionpb.ConditionService.updateCondition:input_type -> conditionpb.ConditionReqWithId
	4,  // 7: conditionpb.ConditionService.DeleteCondition:input_type -> conditionpb.ConditionIdReq
	6,  // 8: conditionpb.ConditionService.IsRegistered:output_type -> conditionpb.ConditionIsRegisteredResp
	7,  // 9: conditionpb.ConditionService.SaveCondition:output_type -> conditionpb.ConditionResp
	7,  // 10: conditionpb.ConditionService.ReadMyCondition:output_type -> conditionpb.ConditionResp
	8,  // 11: conditionpb.ConditionService.ReadAllCondition:output_type -> conditionpb.ConditionRespList
	8,  // 12: conditionpb.ConditionService.ReadByWhereCondition:output_type -> conditionpb.ConditionRespList
	7,  // 13: conditionpb.ConditionService.updateCondition:output_type -> conditionpb.ConditionResp
	9,  // 14: conditionpb.ConditionService.DeleteCondition:output_type -> conditionpb.ConditionDeleteResp
	8,  // [8:15] is the sub-list for method output_type
	1,  // [1:8] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_proto_condition_proto_init() }
func file_proto_condition_proto_init() {
	if File_proto_condition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_condition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_condition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_condition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionReadByWhereReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_condition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionReqWithId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_condition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_condition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionAccountIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_condition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionIsRegisteredResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_condition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_condition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionRespList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_condition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionDeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_condition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_condition_proto_goTypes,
		DependencyIndexes: file_proto_condition_proto_depIdxs,
		MessageInfos:      file_proto_condition_proto_msgTypes,
	}.Build()
	File_proto_condition_proto = out.File
	file_proto_condition_proto_rawDesc = nil
	file_proto_condition_proto_goTypes = nil
	file_proto_condition_proto_depIdxs = nil
}
