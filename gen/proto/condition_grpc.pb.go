// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/condition.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConditionService_IsRegistered_FullMethodName         = "/conditionpb.ConditionService/IsRegistered"
	ConditionService_SaveCondition_FullMethodName        = "/conditionpb.ConditionService/SaveCondition"
	ConditionService_ReadMyCondition_FullMethodName      = "/conditionpb.ConditionService/ReadMyCondition"
	ConditionService_ReadAllCondition_FullMethodName     = "/conditionpb.ConditionService/ReadAllCondition"
	ConditionService_ReadByWhereCondition_FullMethodName = "/conditionpb.ConditionService/ReadByWhereCondition"
	ConditionService_UpdateCondition_FullMethodName      = "/conditionpb.ConditionService/updateCondition"
	ConditionService_DeleteCondition_FullMethodName      = "/conditionpb.ConditionService/DeleteCondition"
)

// ConditionServiceClient is the client API for ConditionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConditionServiceClient interface {
	IsRegistered(ctx context.Context, in *ConditionAccountIdReq, opts ...grpc.CallOption) (*ConditionIsRegisteredResp, error)
	SaveCondition(ctx context.Context, in *ConditionReq, opts ...grpc.CallOption) (*ConditionResp, error)
	ReadMyCondition(ctx context.Context, in *ConditionAccountIdReq, opts ...grpc.CallOption) (*ConditionResp, error)
	ReadAllCondition(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConditionRespList, error)
	ReadByWhereCondition(ctx context.Context, in *ConditionReadByWhereReq, opts ...grpc.CallOption) (*ConditionRespList, error)
	UpdateCondition(ctx context.Context, in *ConditionReqWithId, opts ...grpc.CallOption) (*ConditionResp, error)
	DeleteCondition(ctx context.Context, in *ConditionIdReq, opts ...grpc.CallOption) (*ConditionDeleteResp, error)
}

type conditionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConditionServiceClient(cc grpc.ClientConnInterface) ConditionServiceClient {
	return &conditionServiceClient{cc}
}

func (c *conditionServiceClient) IsRegistered(ctx context.Context, in *ConditionAccountIdReq, opts ...grpc.CallOption) (*ConditionIsRegisteredResp, error) {
	out := new(ConditionIsRegisteredResp)
	err := c.cc.Invoke(ctx, ConditionService_IsRegistered_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) SaveCondition(ctx context.Context, in *ConditionReq, opts ...grpc.CallOption) (*ConditionResp, error) {
	out := new(ConditionResp)
	err := c.cc.Invoke(ctx, ConditionService_SaveCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) ReadMyCondition(ctx context.Context, in *ConditionAccountIdReq, opts ...grpc.CallOption) (*ConditionResp, error) {
	out := new(ConditionResp)
	err := c.cc.Invoke(ctx, ConditionService_ReadMyCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) ReadAllCondition(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConditionRespList, error) {
	out := new(ConditionRespList)
	err := c.cc.Invoke(ctx, ConditionService_ReadAllCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) ReadByWhereCondition(ctx context.Context, in *ConditionReadByWhereReq, opts ...grpc.CallOption) (*ConditionRespList, error) {
	out := new(ConditionRespList)
	err := c.cc.Invoke(ctx, ConditionService_ReadByWhereCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) UpdateCondition(ctx context.Context, in *ConditionReqWithId, opts ...grpc.CallOption) (*ConditionResp, error) {
	out := new(ConditionResp)
	err := c.cc.Invoke(ctx, ConditionService_UpdateCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) DeleteCondition(ctx context.Context, in *ConditionIdReq, opts ...grpc.CallOption) (*ConditionDeleteResp, error) {
	out := new(ConditionDeleteResp)
	err := c.cc.Invoke(ctx, ConditionService_DeleteCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConditionServiceServer is the server API for ConditionService service.
// All implementations must embed UnimplementedConditionServiceServer
// for forward compatibility
type ConditionServiceServer interface {
	IsRegistered(context.Context, *ConditionAccountIdReq) (*ConditionIsRegisteredResp, error)
	SaveCondition(context.Context, *ConditionReq) (*ConditionResp, error)
	ReadMyCondition(context.Context, *ConditionAccountIdReq) (*ConditionResp, error)
	ReadAllCondition(context.Context, *emptypb.Empty) (*ConditionRespList, error)
	ReadByWhereCondition(context.Context, *ConditionReadByWhereReq) (*ConditionRespList, error)
	UpdateCondition(context.Context, *ConditionReqWithId) (*ConditionResp, error)
	DeleteCondition(context.Context, *ConditionIdReq) (*ConditionDeleteResp, error)
	mustEmbedUnimplementedConditionServiceServer()
}

// UnimplementedConditionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConditionServiceServer struct {
}

func (UnimplementedConditionServiceServer) IsRegistered(context.Context, *ConditionAccountIdReq) (*ConditionIsRegisteredResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsRegistered not implemented")
}
func (UnimplementedConditionServiceServer) SaveCondition(context.Context, *ConditionReq) (*ConditionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCondition not implemented")
}
func (UnimplementedConditionServiceServer) ReadMyCondition(context.Context, *ConditionAccountIdReq) (*ConditionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMyCondition not implemented")
}
func (UnimplementedConditionServiceServer) ReadAllCondition(context.Context, *emptypb.Empty) (*ConditionRespList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllCondition not implemented")
}
func (UnimplementedConditionServiceServer) ReadByWhereCondition(context.Context, *ConditionReadByWhereReq) (*ConditionRespList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadByWhereCondition not implemented")
}
func (UnimplementedConditionServiceServer) UpdateCondition(context.Context, *ConditionReqWithId) (*ConditionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCondition not implemented")
}
func (UnimplementedConditionServiceServer) DeleteCondition(context.Context, *ConditionIdReq) (*ConditionDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCondition not implemented")
}
func (UnimplementedConditionServiceServer) mustEmbedUnimplementedConditionServiceServer() {}

// UnsafeConditionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConditionServiceServer will
// result in compilation errors.
type UnsafeConditionServiceServer interface {
	mustEmbedUnimplementedConditionServiceServer()
}

func RegisterConditionServiceServer(s grpc.ServiceRegistrar, srv ConditionServiceServer) {
	s.RegisterService(&ConditionService_ServiceDesc, srv)
}

func _ConditionService_IsRegistered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConditionAccountIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).IsRegistered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_IsRegistered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).IsRegistered(ctx, req.(*ConditionAccountIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_SaveCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConditionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).SaveCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_SaveCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).SaveCondition(ctx, req.(*ConditionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_ReadMyCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConditionAccountIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).ReadMyCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_ReadMyCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).ReadMyCondition(ctx, req.(*ConditionAccountIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_ReadAllCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).ReadAllCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_ReadAllCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).ReadAllCondition(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_ReadByWhereCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConditionReadByWhereReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).ReadByWhereCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_ReadByWhereCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).ReadByWhereCondition(ctx, req.(*ConditionReadByWhereReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_UpdateCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConditionReqWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).UpdateCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_UpdateCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).UpdateCondition(ctx, req.(*ConditionReqWithId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_DeleteCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConditionIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).DeleteCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConditionService_DeleteCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).DeleteCondition(ctx, req.(*ConditionIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ConditionService_ServiceDesc is the grpc.ServiceDesc for ConditionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConditionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "conditionpb.ConditionService",
	HandlerType: (*ConditionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsRegistered",
			Handler:    _ConditionService_IsRegistered_Handler,
		},
		{
			MethodName: "SaveCondition",
			Handler:    _ConditionService_SaveCondition_Handler,
		},
		{
			MethodName: "ReadMyCondition",
			Handler:    _ConditionService_ReadMyCondition_Handler,
		},
		{
			MethodName: "ReadAllCondition",
			Handler:    _ConditionService_ReadAllCondition_Handler,
		},
		{
			MethodName: "ReadByWhereCondition",
			Handler:    _ConditionService_ReadByWhereCondition_Handler,
		},
		{
			MethodName: "updateCondition",
			Handler:    _ConditionService_UpdateCondition_Handler,
		},
		{
			MethodName: "DeleteCondition",
			Handler:    _ConditionService_DeleteCondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/condition.proto",
}
